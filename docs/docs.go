// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/AverageTemperatures": {
            "get": {
                "description": "Gets the average temperatures for cities above or below a given value",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets average temperatures for cities above or below a given value",
                "parameters": [
                    {
                        "enum": [
                            "above",
                            "below"
                        ],
                        "type": "string",
                        "description": "Type of filter (above|below)",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Value for filter",
                        "name": "value",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.City"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    }
                }
            }
        },
        "/cities": {
            "get": {
                "description": "Gets the city names average temperatures max and min temperatures for all cities",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all cities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.City"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    }
                }
            }
        },
        "/city/{name}": {
            "get": {
                "description": "Gets the average temperatures max and min temperatures for a specific city",
                "produces": [
                    "application/json"
                ],
                "summary": "Get city by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.City"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    }
                }
            }
        },
        "/reload": {
            "post": {
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "description": "Reloads data from the CSV file",
                "produces": [
                    "application/json"
                ],
                "summary": "Reload data from CSV file",
                "responses": {
                    "200": {
                        "description": "Data reloaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "models.City": {
            "type": "object",
            "properties": {
                "averageTemperature": {
                    "type": "number"
                },
                "max": {
                    "type": "number"
                },
                "min": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "security": [
        {
            "basicAuth": []
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Go API naloga",
	Description:      "Basic API for displaying temperature data for cities.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
